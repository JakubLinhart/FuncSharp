<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FuncSharp
{
    /// <summary>
    /// A type that is a compound of other types. Can be understood as a cartesian product of types, e.g. T1 × T2 × T3.
    /// Therefore instances of a product type consist of values of the compound types, e.g. T1 value1, T2 value2 and T3 value3.
    /// This interface represents the most abstract definition of a product type with unknown compound types and unknown arity.
    /// </summary>
    public abstract class Product
    {
        /// <summary>
        /// Values of the product.
        /// </summary>
        public abstract IEnumerable<object> ProductValues { get; }

        private int? HashCode { get; set; }

        public override int GetHashCode()
        {
            return HashCode ?? (HashCode = ProductHashCode()).Value;
        }

        public override bool Equals(object obj)
        {
            return ProductEquals(obj);
        }

        public override string ToString()
        {
            var b = new StringBuilder(GetType().SimpleName() + "(");

            var prefix = "";
            foreach (var value in ProductValues)
            {
                b.Append(prefix);
                b.Append(value.SafeToString());
                prefix = ", ";
            }

            b.Append(")");
            return b.ToString();
        }

        protected abstract int ProductHashCode();

        protected abstract bool ProductEquals(object obj);
    }

<#  for (var i = 0; i <= MaxProductArity(); i++) { #>
<#      if (i > 0) { #>
    /// <summary>
    /// A factory for <#= i #>-dimensional strongly-typed immutable products.
    /// </summary>
    public static class Product<#= i #>
    {
        /// <summary>
        /// Creates a new <#= i #>-dimensional canonical product.
        /// </summary>
        public static <#= ProductType(i) #> Create<#= TypeBracket(i) #>(<#= Parameters(i) #>)
        {
            return new Product<#= i + TypeBracket(i) #>(<#= Values(i) #>);
        }

        /// <summary>
        /// Creates a new <#= i #>-dimensional canonical product.
        /// </summary>
        public static <#= ProductType(i) #> Create<#= TypeBracket(i) #>(<#= ProductType(i) #> p)
        {
            if (Equals(p.GetType(), typeof(<#= ProductType(i) #>)))
            {
                return p;
            }

            return Create(<#= Properties(i, name: "p.ProductValue") #>);
        }
    }

<#      } #>
    /// <summary>
    /// A <#= i #>-dimensional strongly-typed immutable product.
    /// </summary>
    public class <#= ProductType(i) #> : Product
    {
        public Product<#= i #>(<#= Parameters(i) #>)
        {
<#      for (var j = 1; j <= i; j++) { #>
            <#= ProductProperty(j) #> = <#= Value(j) #>;
<#      } #>
        }
<#      for (var j = 1; j <= i; j++) { #>

        /// <summary>
        /// Value of the product in the dimension <#= j #>.
        /// </summary>
        public <#= Type(j) #> <#= ProductProperty(j) #> { get; }
<#      } #>

        public override IEnumerable<object> ProductValues
        {
            get
            {
<#      if (i > 0) { #>
<#          for (var j = 1; j <= i; j++) { #>
                yield return <#= ProductProperty(j) #>;
<#          } #>
<#      } else { #>
                return Enumerable.Empty<object>();
<#      } #>
            }
        }
<#      if (i == 0) { #>

        /// <summary>
        /// Creates a new <#= i #>-dimensional canonical product.
        /// </summary>
        public static <#= ProductType(i) #> Create<#= TypeBracket(i) #>(<#= Parameters(i) #>)
        {
            return new Product<#= i + TypeBracket(i) #>(<#= Values(i) #>);
        }

        /// <summary>
        /// Creates a new <#= i #>-dimensional canonical product.
        /// </summary>
        public static <#= ProductType(i) #> Create<#= TypeBracket(i) #>(<#= ProductType(i) #> p)
        {
            if (Equals(p.GetType(), typeof(<#= ProductType(i) #>)))
            {
                return p;
            }

            return Create(<#= Properties(i, name: "p.ProductValue") #>);
        }
<#      } #>
<#      if (i <= MaxFuncArity()) { #>

        /// <summary>
        /// Invokes the specified function with the product values as its parameters and returns its result.
        /// </summary>
        public R Match<R>(Func<<#= Types(i, appendSeparator: true) #>R> f)
        {
            return f(<#= Properties(i, name: "ProductValue") #>);
        }
<#          if (i > 0) { #>

        /// <summary>
        /// Invokes the specified function with the product values as its parameters.
        /// </summary>
        public void Match(Action<<#= Types(i) #>> f)
        {
            f(<#= Properties(i, name: "ProductValue") #>);
        }
<#          } #>
<#      } #>

        protected override int ProductHashCode()
        {
            return ValueTuple.Create(<#= Properties(i, name: "ProductValue") #>).GetHashCode();
        }

        protected override bool ProductEquals(object obj)
        {
            return
                obj is <#= ProductType(i) #> p &&
<#          for (var j = 1; j <= i; j++) { #>
                Equals(<#= ProductProperty(j) #>, p.<#= ProductProperty(j) #>) &&
<#          } #>
                Equals(GetType(), p.GetType());
        }
    }

<#  } #>
}
